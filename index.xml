<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TomatoPunk</title><link>https://murph.site/</link><description>Recent content on TomatoPunk</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>京ICP备2020037990号</copyright><lastBuildDate>Tue, 10 Nov 2020 14:27:26 +0000</lastBuildDate><atom:link href="https://murph.site/index.xml" rel="self" type="application/rss+xml"/><item><title>About Me</title><link>https://murph.site/about/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://murph.site/about/</guid><description>&lt;p>&lt;em>modern wizard&lt;/em>&lt;/p>
&lt;p>Hullo! I’m Murphy and I’m a blogger from the China.&lt;/p>
&lt;h1 id="where-you-can-find-me">Where you can find me:&lt;/h1>
&lt;p>&lt;a href="mailto:lion.zhang@mail.com">&lt;img src="https://img.shields.io/badge/-mail-c14438?style=for-the-badge&amp;amp;logo=maildotru&amp;amp;logoColor=ffffff" alt="Gmail Badge">&lt;/a>
&lt;a href="https://github.com/tomatopunk">&lt;img src="https://img.shields.io/github/followers/tomatopunk?logo=github&amp;amp;style=for-the-badge" alt="GitHub Flamingo">&lt;/a>&lt;/p></description></item><item><title>大话线程(CLR视角)</title><link>https://murph.site/post/2020-11-13-c-clr-thread/</link><pubDate>Tue, 10 Nov 2020 14:27:26 +0000</pubDate><guid>https://murph.site/post/2020-11-13-c-clr-thread/</guid><description>&lt;h3 id="原文信息">原文信息&lt;/h3>
&lt;p>&lt;strong>原文来自于CLR的概要设计系列中,线程篇&lt;/strong>
&lt;strong>本文将会介绍一些关于&lt;code>托管线程&lt;/code> &lt;code>原生线程&lt;/code>,&lt;code>线程生命周期&lt;/code>,&lt;code>线程数据结构&lt;/code>等设计&lt;/strong>
&lt;a href="https://github.com/dotnet/coreclr/blob/master/Documentation/botr/threading.md">原文:dotnet/coreclr&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="translating">Translating!!!&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Managed Thread vs Native Threads&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Data Structures&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Thread Lifetimes&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Suspension&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Entering Cooperative Model&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Suspending the EE&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Hijacking&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Thread Abort / AppDomain-Unload&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Synchronization:Managed&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Synchronization:Native&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> GC Mode&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Crst&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Special Threads&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Finalizer Thread&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> GC Threads&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Debugger Thread&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Appdomain-Unload Thread&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> ThreadPool Threads&lt;/li>
&lt;/ul>
&lt;h3 id="托管线程managed-thread-vs-原生线程native-threads">托管线程(Managed Thread) vs 原生线程(Native Threads)&lt;/h3>
&lt;p>托管代码在“托管线程”上执行,“托管线程”与操作系统提供的原生线程不同,原生线程是在物理机上执行原生代码的线程.托管代码是在CLR虚拟机执 行的虚拟线程.&lt;/p>
&lt;p>就像JIT编译器将“虚拟”IL指令映射到原生指令在物理机上执行一样,CLR的线程&lt;strong>infrastructure&lt;/strong>将“虚拟”的托管线程映射到操作系统的原生线程上.&lt;/p>
&lt;p>在任何时候,一个托管线程也许会,也可能不会分配一个原生线程来执行.例如一个已创建(通过“new System.Threading.Thread”)但是未启动(通过System.Threading.Thread.Start)的托管线程没有被分配任何的原生线程.同样,一个托管线程也可能在执行过程中在多个的原生线程之间移动,尽管实际上CLR目前不支持此操作.&lt;/p>
&lt;p>托管代码可使用公共线程接口有意隐藏了关于底层中原生线程的细节,因为&lt;/p>
&lt;ul>
&lt;li>托管线程不一定会映射到单个原生线程(也可能根本没有映射到原生线程上)&lt;/li>
&lt;li>不同到操作系统提供了不同的原生线程的抽象.&lt;/li>
&lt;li>原则上,托管线程是“虚拟的”.&lt;/li>
&lt;/ul>
&lt;p>CLR提供了托管线程的抽象.例如,未公开操作系统的线程本地存储(TLS)机制.而是提供了托管的“静态线程(thread-static)”变量.同样没有暴露原生线程的“线程ID”,而是提供了独立于OS的托管“线程ID”.出于诊断的目的,可以通过System.Diagnostics命名空间下的类型获取原生线程的一些底层细节.&lt;/p>
&lt;p>托管线程需要一些原生线程通常不用的功能.首先,托管线程需将GC引用保存在栈上,以便CLR能够在每次发生GC时枚举(或修改)这些引用.为此,CLR需要“挂起(suspend)”所有托管线程(暂停在可以找到所有GC引用的点).第二,当AppDomain卸载时.CLR必须确保没有线程在该AppDomain中执行代码.这要求CLR能够让线程强制从该AppDomain中回退出来.CLR通过向这些线程注入ThreadAbortException来实现.&lt;/p>
&lt;h3 id="数据结构data-structures">数据结构(Data Structures)&lt;/h3>
&lt;p>每一个托管线程都有关联的Thread对象,定义在&lt;a href="https://github.com/dotnet/coreclr/blob/master/src/vm/threads.h">threads.h&lt;/a>.该对象跟踪虚拟机需要的关于托管线程的一切信息,如当前GC模式与Frame chain的必要信息,以及处于性能原因分配到每个线程中的信息(例如arena-style allocators[1]).&lt;/p>
&lt;p>所有的线程对象都存储在ThreadStore(同样定义在[threads.h]),包含了所有已知线程对象的简单列表.要枚举所有的托管线程,必须先获取ThreadStoreLock,然后使用ThreadStore::GetAllThreadList来枚举全部的线程对象.该列表可能包含未分配原生线程的托管线程(它们可能没有启动或原生线程已经退出).&lt;/p>
&lt;p>所有被分配了托管线程的原生线程,都可以通过访问线程局部存储(TLS)来获取绑定的托管线程.这允许执行在原生线程的代码获取相应的线程对象,例如GetThread().&lt;/p>
&lt;p>&lt;strong>Additionally, many managed threads have a managed Thread object (System.Threading.Thread) which is distinct from the native Thread object. The managed Thread object provides methods for managed code to interact with the thread, and is mostly a wrapper around functionality offered by the native Thread object. The current managed Thread object is reachable (from managed code) via Thread.CurrentThread.&lt;/strong>/此外,许多托管线程都有一个托管的线程对象(System.Threading.Thread),它与原生的线程对象不同.托管的线程对象提供了托管代码与线程进行交互的方法.主要是对原生线程对象提供的功能进行了封装.当前的托管线程对象可以通过(来自托管代码)Thread.CurrentThread拿到.&lt;/p>
&lt;p>debugger时,可以使用SOS的拓展命令&amp;quot;!Thread&amp;quot;枚举出ThreadStore中的所有线程对象.&lt;/p>
&lt;h3 id="线程生命周期thread-lifetimes">线程生命周期(Thread Lifetimes)&lt;/h3>
&lt;p>一个托管线程将在以下场景被创建
1. 托管代码通过System.Threading.Thread,明确要求CLR进行创建新线程.
2. CLR直接创建托管线程(参见下面的[特殊线程][https://github.com/dotnet/coreclr/blob/master/Documentation/botr/threading.md#special-threads])
3. 在原生线程上,由原生代码调用托管代码,而原生线程还没有与托管线程关联(通过&amp;quot;reverse p/invoke&amp;quot;或COM互操作).
4. 托管进程启动(在进程的主线程上调用Main函数)&lt;/p>
&lt;p>在#1,#2情况下,CLR负责创建一个原生线程来支持托管线程.这只会在线程被实际启动后完成.在这种情况下,CLR&amp;quot;持有&amp;quot;这个原生线程;CLR负责这个原生线程的生命周期.在这种情况下,&lt;strong>~the CLR is aware of the existence of the thread by virtue of the fact that the CLR created it in the first place.&lt;/strong>&lt;/p>
&lt;p>在#3,#4的情况下,原生线程在托管线程被创建前就已经存在,并且由CLR的外部代码&amp;quot;&amp;quot;.CLR不负责原生线程的生命周期.CLR在这些线程首次尝试调用托管代码时,才会意识到这些线程的存在.&lt;/p>
&lt;p>当原生线程死亡时,CLR会通过DllMain方法接收到通知.这发生在OS的&amp;quot;loader lock&amp;quot;内部,在处理此通知时,几乎无法(安全)完成.因此与其销毁托管线程相关联的数据结构,不如将线程简单地标记成&amp;quot;dead&amp;quot;并向finalizer线程发送运行信号(signals).finalizer线程将遍历ThreadStore中的线程,并通过托管代码销毁已死且不可达的线程.&lt;/p>
&lt;h3 id="挂起suspension">挂起(Suspension)&lt;/h3>
&lt;p>CLR必须能够找到所有的托管对象的引用以便执行GC.托管代码不断访问GC堆,操作存储在栈与寄存器中的引用.CLR必须确保所有的托管线程都已经停止(所以他们不会修改堆),以便安全可靠的找到所有的托管对象.它将仅在安全点暂停,此时可以检查寄存器与栈空间的实时引用.&lt;/p>
&lt;p>针对GC堆的另外一种说法:GC堆以及每个线程的栈和寄存器状态都是&amp;quot;共享状态(shared state)&amp;quot;,可以被多个线程访问.与大多数共享状态一样,需要某种锁来保护它.托管代码在访问堆时必须持有此锁,并且只能在安全点释放该锁.&lt;/p>
&lt;p>CLR将此&amp;quot;锁&amp;quot;称为线程的&amp;quot;GC模式&amp;quot;,对于&amp;quot;Cooperatibe mode(合作模式)&amp;ldquo;的线程将持有此锁;它必须与GC合作(通过释放此锁)才能进行GC.处于&amp;quot;Preemptive(抢占模式)&amp;ldquo;的线程不需要持有锁-GC可以抢占的执行因为已知线程不会访问GC堆.&lt;/p>
&lt;p>只有当所有的托管线程都处于&amp;quot;抢占模式(不持有锁)&amp;ldquo;GC才可以进行.将所有的托管线程移动至抢占模式的过程,称为&amp;quot;GC suspension-GC挂起&amp;quot;或&amp;quot;suspending the Execution Engine(EE)-挂起执行引擎&amp;rdquo;.&lt;/p>
&lt;p>一个关于&amp;quot;锁&amp;quot;的天真方案,每个托管线程在访问GC堆前后都获取并释放锁,然后GC将简单的尝试获取每个线程的锁;一旦持有了全部线程的锁时,就可以安全的执行GC&lt;/p>
&lt;p>然而,上述的方案存在两个缺陷,首先,托管代码会在持有跟释放锁上花费大量时间(或最小检查GC是否正在尝试持有锁.也叫GC轮询).其次,将要求JIT生成大量的&amp;quot;GC info&amp;rdquo;,描述每一行代码经过JIT后栈和寄存器的布局.&lt;/p>
&lt;p>我们改进了上述方案,将JIT后的托管代码分成两类:&amp;ldquo;partially interruptible(部分可中断)&amp;ldquo;和&amp;rdquo;(fully interruptible)完全可中断&amp;rdquo;.在部分可中断的代码中,唯一安全点是调用其他方法,且JIT明确生成&amp;quot;GC轮询&amp;quot;点,以便检查是否有GC正在等待.JTI只需要在这些地方生成GC信息.在完全可中断的代码中,每条指令都是安全点,且JIT会为每条指令生成GC信息-但不会生成GC轮询的代码.与之相反,完全可中断的代码可能会通过&amp;quot;hijacking(劫持)&amp;ldquo;线程的方式来中断(这个过程将放到本文后面讨论).JIT基于启发式方法选择是否生成完全/部分可中断的代码.在代码质量,GC信息的大小与GC的挂起延迟之间找到最佳的权衡点.&lt;/p>
&lt;p>综上所述,我们定义了三个阶段:进入抢占模式,离开抢占模式和挂起执行引擎(Execution Engine)&lt;/p>
&lt;h3 id="进入合作模式entering-cooperative-mode">进入合作模式(Entering Cooperative Mode)&lt;/h3>
&lt;p>当需要发生GC时,第一步是调用GCHeap::SuspendEE,挂起EE,具体操作如下:
1. 设置一个全局flag(g_fTrapReturningThreads)标识GC正在进行中.任何尝试进入合作模式的线程都会阻塞,直到GC完成.
2. 查找当前正处于合作模式的线程.尝试劫持线程,以迫使它离开合作模式.
3. 重复上述步骤,直到没有现成处于合作模式.&lt;/p>
&lt;h3 id="劫持hijacking">劫持(Hijacking)&lt;/h3>
&lt;p>在GC的挂起过程中,劫持由Thread::SysSuspendForGC完成.该方法通过强制将当前正处于合作模式下的托管线程,在&amp;quot;安全点&amp;quot;离开合作模式.并通过枚举所有托管线程(通过访问ThreadStore),对当前正处于合作模式下的进行一下操作:
1. 通过调用Win32 SuspendThread API,挂起底层的原生线程.强制线程从运行状态停止在任意状态(不一定是安全点).
2. 通过 GetThreadContext获取当前线程上下文.这是OS的概念,上下文包含了线程当前的寄存器状态.以便我们检查它的指令指针寄存器(IP/IAR),从而确定当前正在执行的代码类型.
3. 再次检查线程是否处于合作模式,因为它在被挂起前就已经离开了合作模式.If so,代码就正处于危险区域:线程也许正在执行任何的原生代码,必须立刻恢复以避免死锁.
4. 检查线程是否在运行托管代码.可能正处与合作模式中执行原生VM代码(详见下文的Synchronization章节),这种情况也需如上一步,立即恢复线程.
5. 现在,该线程已经在托管代码中被挂起.根据代码处与完全/部分可中断,执行以下操作之一:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If fully interruptable, it is safe to perform a GC at any point, since the thread is, by definition, at a safe point. It is reasonable to leave the thread suspended at this point (because it&amp;rsquo;s safe) but various historical OS bugs prevent this from working, because the CONTEXT retrieved earlier may be corrupt). Instead, the thread&amp;rsquo;s instruction pointer is overwritten, redirecting it to a stub that will capture a more complete CONTEXT, leave cooperative mode, wait for the GC to complete, reenter cooperative mode, and restore the thread to its previous state.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If partially-interruptable, the thread is, by definition, not at a safe point. However, the caller will be at a safe point (method transition). Using that knowledge, the CLR &amp;ldquo;hijacks&amp;rdquo; the top-most stack frame&amp;rsquo;s return address (physically overwrite that location on the stack) with a stub similar to the one used for fully-interruptable code. When the method returns, it will no longer return to its actual caller, but rather to the stub (the method may also perform a GC poll, inserted by the JIT, before that point, which will cause it to leave cooperative mode and undo the hijack).&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>诊断性能问题的工作流程(0)</title><link>https://murph.site/post/2020-11-07-diagnosingmemoryperformance-part0/</link><pubDate>Sat, 07 Nov 2020 14:27:26 +0000</pubDate><guid>https://murph.site/post/2020-11-07-diagnosingmemoryperformance-part0/</guid><description>&lt;p>原文为Maoni发布在Microfost Blog中的, 诊断性能问题的工作流程系列.
目前共更新三章. 在本章中, Maoni介绍了一些关于GC设计与工具的使用, 如果您已经具备了诊断性能问题的经验, 可以直接跳过本章.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="原文信息">原文信息&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/maoni0">@Maoni Stephens-Twitter&lt;/a>
&lt;a href="https://github.com/Maoni0">@Maoni Stephens-Github&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://murph.site/posts/images/1587561145552-0d8a560c-3b7d-443a-badc-a98ddbb6e7bf.png" alt="authorize">&lt;/p>
&lt;p>如果这篇文章可以帮到您，那么这将是我最大的荣幸，希望您点进原文，在文章下方留下善意的回复，您的支持将是这些可敬的社区磐石保持创作激情中最大的一部分:)&lt;/p>
&lt;p>&lt;a href="https://devblogs.microsoft.com/dotnet/work-flow-of-diagnosing-memory-performance-issues-part-0">原文&lt;/a>&lt;/p>
&lt;p>&lt;strong>中文版本将不会以任何形式收费，版权属与原作者&lt;/strong>&lt;/p>
&lt;hr>
&lt;h2 id="正文">正文&lt;/h2>
&lt;p>我想描述一下我是怎样诊断内存中的性能问题, 更确切的说是在进行此类诊断的各种工作流程中可通用的部分. 诊断性能问题没有固定的步骤, 可以采用很多方式, 我将尝试一下分解成可用于进行各种诊断一些基本的模块.&lt;/p>
&lt;p>这一部分是针对于初学者的, 所以如果您已经进行了一段时间的内存中性能问题分析, 您可以安全的跳过这一章节.&lt;/p>
&lt;p>首先, 在我们开始讨论实际的诊断部分之前, 先让我们了解一些高级知识, 帮您指明正确的方向.&lt;/p>
&lt;h3 id="gc的一些高级知识">GC的一些高级知识&lt;/h3>
&lt;h4 id="1时间点-vs-时间段">1)时间点 vs 时间段&lt;/h4>
&lt;p>了解性能问题往往不是点状, 这一点非常重要. 内存问题通常不会突然出现, 可能需要一段时间才能积累到明显的程度.&lt;/p>
&lt;p>让我们举一个简单的例子, 对于一个非常简单的没有世代的GC, 它只会紧凑的进行阻塞式GC. 这种情况会一直存在. 如果您的GC刚刚结束, 堆当然处在最小的点. 如果您碰巧在这个时间点进行测量, 您会认为“太好了;我的堆很小”. 但如果您恰好在进行下一次GC之前测量, 则堆可能会大得多, 并且您会有一些不同的看法. 这只是针对于一个简单的GC. 想象一下当您有一个世代GC或并发式GC时会发生些什么.&lt;/p>
&lt;p>这就是为什么了解一下GC的历史是及其重要的, 看看GC是如何作出决策, 以及这些决策是如何导致目前的情况.&lt;/p>
&lt;p>遗憾的是, 很多内存工具或诊断方法, 都没有将其考虑在内, 它们进行内存诊断都方式是“让我来告诉您, 您碰巧问到的那个时间点, 堆上的情况”. 这往往无济于事, 有时候甚至会完全误导人们. 浪费时间去追寻一个不存在的问题或在一个完全错误的问题上取得一些完全错误的进展.&lt;/p>
&lt;p>并不是说此类工具一点用处都没有-当问题很简单时, 它们可能会有所帮助. 如果您有一个非常严重的的内存泄漏, 并且已经持续了一段时间, 而您使用一个工具来显示当前的堆(采取进程转储或使用sos, 或者另外的一些堆转储的工具), 可能确实会很明显的显示出泄漏的是什么.&lt;/p>
&lt;h4 id="2世代gc">2)世代GC&lt;/h4>
&lt;p>根据设计, 具有世代的GC并不会每次触发时收集整个堆. 尝试对年轻代GC频率要比对老年代GC高得多, 因为对老年代GC的成本往往要高得多. 对于并发式的老年代GC来说, STW的的中断时间不会很长, 但仍然会需要花费机器周期来完成GC的工作.&lt;/p>
&lt;p>这也使查看堆变得更加复杂, 如果您刚完成一个老年代的GC, 特别是刚经历过压缩的GC, 您的堆显然会比在该GC被触发之前小的多. 但如果您查看年轻代的GC, 它们可能正在压缩, 但是区别在于堆大小可能不会有太大变化, 这是设计上所实现的.&lt;/p>
&lt;h4 id="3压缩-vs-回收">3)压缩 vs 回收&lt;/h4>
&lt;p>回收不应该过多的改变堆的大小. 在我们的实现中, 我们仍然会放弃堆末尾的空间, 所以整体的堆大小可能会变小, 但总的来说, 您可以认为整体的堆大小并没有发生改变, 但是为了容纳年轻代的堆分配(或者用户分配在零代/LOH的情况下), 会建立起自由空间(free spaces).&lt;/p>
&lt;p>因此, 如果您看到对二代的两次gc, 一次正在压缩另一次正在回收. 那么可以预计, 压缩阶段结束后, 堆大小会缩小很多. 回收阶段的碎片化程度则会很高(在设计中, 这是我们设计中的自由列表(free list)).&lt;/p>
&lt;h4 id="4分配-vs-存活">4)分配 vs 存活&lt;/h4>
&lt;p>虽然很多内存工具都会报告分配情况, 但是GC的成本不仅仅是来自分配. 当然分配会触发GC, 这无疑是成本. 但当GC工作时, 成本主要取决于存活. 当然, 您不能同时处于分配率和存活率都很高的情况, 这样只会非常快的用光内存.&lt;/p>
&lt;h4 id="5主线gc方案-vs-非主线">5)“主线GC方案 vs 非主线”&lt;/h4>
&lt;p>如果您的程序仅仅是使用栈并且创建了一些要使用的对象, GC多年来一直在优化. 基本上就是“扫描堆栈得到根对象然后在那里处理对象”. 这就是许多GC论文都将其视为唯一的方案的主线GC方案. 当然作为一个存在了几十年的商业产品, 为了适应客户的各种需求, 我们还有一些其他的东西, 例如GC句柄和终结器.&lt;/p>
&lt;p>有一个很重要的事情请您理解, 虽然多年来我们对这些进行了优化, 但我们都是基于“没有太多的这些东西”基础上进行的假设, 这显然不会适用于每个人. 所以如果您确实使用了很多这些东西, 在诊断内存问题时值得一看. 换句话说, 如果您没有内存问题, 则无需在意;但是如果您有(例如high % time in GC), 它们是很好的怀疑对象.&lt;/p>
&lt;p>所有的这些信息都表示为ETW事件或在Linux上的等效事件-这就是为什么我们多年来投资于分析跟踪的工具的原因.&lt;/p>
&lt;h3 id="开始捕捉跟踪">开始捕捉跟踪&lt;/h3>
&lt;p>我通常会从两条跟踪开始. 第一次是为了获取准确的GC时间:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Shell" data-lang="Shell">perfview /GCCollectOnly /nogui collect
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完成后, 在PerfView的cmd窗口按s停止.&lt;/p>
&lt;p>这应该运行足够长的时间, 充分捕获GC活动, 例如, 如果您知道问题何时会发生, 则应该涵盖导致问题发生的时间(不仅仅只有发生问题的时间).&lt;/p>
&lt;p>如果您知道要运行多长时间, 您可以这样做(实际上更常用) -&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Shell" data-lang="Shell">perfview /GCCollectOnly /nogui /MaxCollectSec:1800 collect
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将1800(半小时)替换成您需要的秒数&lt;/p>
&lt;p>这会收集infomational级别的GC事件和足够的OS事件, 以及解码后的进程名称. 这个命令非常轻量, 所以它可以一直保持运行.&lt;/p>
&lt;p>请注意, 我给出的所有PerfView命令都有&lt;code>/nogui&lt;/code>. PerfView确实有一个用于事件收集的UI, 可以让您选择需要捕获的事件. 就我而言, 我从没使用过它(除了在我刚使用PerfView时使用过几次). 一部分原因是因为我更喜欢命令行;另一个(更重要的)原因是命令行具有更多的灵活性, 对自动化很友好.&lt;/p>
&lt;p>当您搜集到跟踪数据后, 您可以使用PerfView打开它并查看GCStats视图, 有些人倾向于在完成收集后将其发送给我, 但我真的鼓励每个需要定期进行内存诊断的人学习阅读这个视图, 它非常有用. 尽管跟踪如此轻量, 但仍旧给我们提供了大量的信息. 并且就算不能让我们找到根本原因, 也会指出取得更大进展的方向. 我在[这篇文章](https://devblogs. microsoft. com/dotnet/gc-etw-events-1/)及续篇描述了这些视图, 在文章中都有链接. 所以我在这里不打算展示更多的图片. 您可以自己很轻易的打开这些视图.&lt;/p>
&lt;p>通过此视图很容易发现的问题类型的例子 -&lt;/p>
&lt;ul>
&lt;li>
&lt;p>非常高的“% Time paused for garbage collection(垃圾收集的中断时间百分比)”. 除非您正在做一些基准测试, 特别是在测试分配性能(类似非常多GC的基准测试), 否则这个不指标不应该高于百分之几. 如果您发现该指标已经很高了, 那就需要调查了. 下面是一些会显著导致这个百分比增加的情况.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>个别GC的中断事件特别长. 60s的GC很长吗?是的, 肯定很长!通常来说不是由于GC的工作导致的. 根据我的经验, 这往往是由于某些因素干扰了GC线程的工作.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>过多主动触发GC(当 &lt;strong>主动触发的GC/触发GC的总数量&lt;/strong> 比例很高时), 特别是对第二代主动触发的GC时.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>过多的针对二代堆GC - 对二代堆进行GC成本是十分昂贵的, 尤其是当您有一个大堆时. 即便使用了BGC, 大部分工作都是并发完成的. 但它仍需要花费机器周期, 因此, 如果您其他的GC都是针对第二代, 这通常是指出了一个问题, 一种明显的情况是它们大部分的触发理由都是AllocLarge. 同样, 在某些情况下这不一定是问题, 例如, 如果您的堆大部分都是LOH, 并且没有在容器中运行, 这意味着LOH默认不会进行压缩, 在这种情况下, 二代堆GC只会回收并快速的退出.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>长时间的挂起问题 - 挂起通常应该远远小于1ms, 如果需要几毫秒-10s, 那就是问题, 如果需要花费上百毫秒, 那毫无疑问是问题.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>过多的固定句柄 - 一般情况下, 少量的几个固定句柄是可以的, 但如果您在短暂的GC中看到数百个, 那就值得关注了;如果您看到几千个, 通常, 这是告诉您需要进行调查了.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这些只是您第一眼就能看到的东西. 如果您要进行更加深入的挖掘, 还有很多事情要做. 我们下次在讨论.&lt;/p></description></item><item><title>Go中的Context</title><link>https://murph.site/post/2020-11-13-context-in-golang/</link><pubDate>Tue, 22 Sep 2020 14:27:26 +0000</pubDate><guid>https://murph.site/post/2020-11-13-context-in-golang/</guid><description>&lt;h3 id="原文信息">原文信息&lt;/h3>
&lt;p>&lt;a href="https://levelup.gitconnected.com/@ricardo.linck">@ricardo.linck&lt;/a>
&lt;a href="https://levelup.gitconnected.com/context-in-golang-98908f042a57">原文:Context in Golang!&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;p>Golang应用程序使用Contexts来进行控制与管理非常关健的应用可靠性,例如在&lt;a href="https://levelup.gitconnected.com/goroutines-and-channels-concurrent-programming-in-go-9f9f8495c34d">concurrent programming&lt;/a>中的数据共享与取消.这听起来似乎很琐碎,但实际并非如此.在Golang中Contexts的入口点是&lt;code>context&lt;/code>包.它非常有用,并且可能是整个语言功能最多的包之一.如果您还没有遇到任何有关上下文之类的东西,您大概很快就会遇到(或者您只是没有注意到它).上下文的用法非常广泛,以至于多数软件包都依赖它,并也假设您也会这样做.它绝对是Golang生态系统中的一个关键组件.&lt;/p>
&lt;p>这里是&lt;code>context&lt;/code>软件包的官方文档 &lt;a href="https://golang.org/pkg/context/">https://golang.org/pkg/context/&lt;/a>.它真的很棒,并且包含了很多例子.为了尝试拓展它们,来让我们看看我在真实场景是如何使用的.&lt;/p>
&lt;h3 id="使用上下文来包含您的数据">使用上下文来包含您的数据&lt;/h3>
&lt;p>一个常见的使用上下文的用户之一是用于共享数据,或者使用请求作用域的值.当您有多个函数并且想在他们之间共享数据,您可以使用上下文.&lt;/p>
&lt;p>最简单的方法是使用函数 context.WithValue.这个函数会根据父上下文创建一个新的上下文,并对您指定的Key添加一个值.您可以把内部实现看做是上下文的内部是一个map.&lt;/p>
&lt;p>所以您可以添加或者使用Key来找回Values,这是非常强大的,因为它允许您在上下文内部存储任何类型的数据.&lt;/p>
&lt;p>下面是一个用上下文添加和找回数据的例子.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;context&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ctx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">ctx&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">addValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">readValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">addValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;test-value&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">readValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>在上下文中添加和找回值&lt;/p>
&lt;/blockquote>
&lt;p>在Context包设计背后有一种重要的方面,任何操作都会返回一个新的context.Context结构.这意味着您需要记住运行时要用带的返回值,并尽可能的使用新的上下文覆盖旧上下文.&lt;/p>
&lt;p>这是来自于不可更改性(immutability)的关键设计.如果您想了解更多的关于gokang中的不可更改性,您可以阅读我的&lt;a href="https://levelup.gitconnected.com/immutability-in-golang-7a13199060bb">这篇文章&lt;/a>&lt;/p>
&lt;p>要创建一个带有取消功能的上下文,您只需要使用函数&lt;code>context.WithCancel(ctx)&lt;/code>将您的上下文通过参数传递进去.这会返回一个新的上下文与一个取消函数.您只需要调用取消函数,就可以取消上下文.&lt;/p>
&lt;p>下面这个例子来自于&lt;a href="https://medium.com/swlh/hedged-requests-tackling-tail-latency-9cea0a05f577">对冲请求(Hedged Request)&lt;/a>实现的带有取消功能的上下文.来让我们快速的回顾一下&lt;a href="https://medium.com/swlh/hedged-requests-tackling-tail-latency-9cea0a05f577">对冲请求(Hedged Request)&lt;/a>:我们对一个外部服务发起请求,如果在我们定义的时间没有返回,我们会发出第二个请求.当请求返回了,所有其他的请求都会被取消掉.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;context&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;io/ioutil&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span class="nx">neturl&lt;/span> &lt;span class="s">&amp;#34;net/url&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">queryWithHedgedRequestsWithContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">urls&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ch&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">urls&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cancel&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithCancel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nf">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">url&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">urls&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nf">executeQueryWithContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">ch&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">After&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">21&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">ch&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">executeQueryWithContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">start&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">parsedURL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">neturl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">URL&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">parsedURL&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DefaultClient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Do&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">body&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Body&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Request time: %d ms from url%s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Since&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Nanoseconds&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Nanoseconds&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s from %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>每个请求都是在一个独立的go routine中触发的.这个上下文被传递给所有触发的请求.唯一的逻辑就是将上下文传播给Http client.以便当取消函数辈调用时,可以优雅的取消请求和底层连接.对于接受context.Context作为参数的函数来说,这是一个非常常见的模式,它们要么主动地对上下文采取行动(比如检查它们是否已经取消),要么将它们传递给处理它的底层函数(本例中是通过http.Request的Do函数接受上下文)&lt;/p>
&lt;h3 id="超时上下文">超时上下文&lt;/h3>
&lt;p>在处理外部请求时,超时是一种非常常见的模式,类似通过Http或gRPC查询数据库或者从其他服务中获取数据.使用Context包处理这些产经非常简单.您所需要做的就是调用函数&lt;code>context.WithTimeout(ctx,time)&lt;/code>,传递您的上下文与实际的超时时间,类似这样&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cancel&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>您仍然可以接受到取消函数,以防您想手动触发它.它的工作方式与普通的超时上下文相同.&lt;/p>
&lt;blockquote>
&lt;p>一个好做法是,使用defer调用取消函数,避免内存泄露&lt;/p>
&lt;/blockquote>
&lt;p>这个例子的行为非常直接.如果超时了,上下文会被取消.在HTTP调用的情况下,它的工作原理与上面的例子基本相同&lt;/p>
&lt;h3 id="grpc">gRPC&lt;/h3>
&lt;p>Context是gRPC在golang的实现中的一个基本部分.它即用来共享数据(如何取消&lt;a href="https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md">元数据&lt;/a>)也用来控制流量,类似于取消流或请求.这是我的两个例子,来自于&lt;a href="https://github.com/RicardoLinck/grpc-go">GitHub存储库&lt;/a>.&lt;/p>
&lt;h4 id="metadata">Metadata&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">server&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">calculatorpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SumRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">calculatorpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SumResponse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Sum rpc invoked with req: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">md&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FromIncomingContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Metadata received: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">md&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">calculatorpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SumResponse&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NumA&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NumB&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Server implementation receiving metadata&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="nx">calculatorpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CalculatorServiceClient&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">calculatorpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SumRequest&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">NumA&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">NumB&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">ctx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AppendToOutgoingContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error calling Sum RPC: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Response: %d\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Client implementation sending metadata&lt;/p>
&lt;/blockquote>
&lt;h4 id="calcellation">Calcellation:&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">server&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">greetpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GreetRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">greetpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GreetResponse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Greet rpc invoked!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Err&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Canceled&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">codes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Canceled&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Client cancelled the request&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">first&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Greeting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FirstName&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">greetpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GreetResponse&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">first&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Server implementation handling context cancellation&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">
&lt;span class="kd">func&lt;/span> &lt;span class="nf">greetWithTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="nx">greetpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GreetServiceClient&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">greetpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GreetRequest&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Greeting&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">greetpb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Greeting&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">FirstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Ricardo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">LastName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Linck&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cancel&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nf">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">grpcErr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FromError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">grpcErr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Code&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">codes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DeadlineExceeded&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Deadline Exceeded&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error calling Greet RPC: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Response: %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="opentelemetry">OpenTelemetry&lt;/h3>
&lt;p>&lt;code>OpenTelemetry &lt;/code>还严重依赖于上下文来实现所谓的&lt;strong>上下文传播(Context Propagation)&lt;/strong>.这是一种将不同系统中请求捆绑起来的做法.实现方式是将Span信息&lt;code>注入(Inject)&lt;/code>到上下文中,作为您使用的协议的一部分(例如HTTP或gRPC).在另一个服务上,您需要&lt;code>提取(Extrace)&lt;/code>Span信息.我在两篇文章中写过关于OpenTelemetry的文章,您可以在之类找到&lt;a href="https://medium.com/swlh/distributed-tracing-with-opentelemetry-part-1-6719df95a364">part 1&lt;/a>,&lt;a href="https://levelup.gitconnected.com/distributed-tracing-with-opentelemetry-part-2-cc5a9a8aa88c">part 2&lt;/a>.在这里您可以找到更多的关于OpenTelemetry的信息,以及使用gRPC和HTTP的例子.&lt;/p>
&lt;h3 id="最后的一些想法">最后的一些想法&lt;/h3>
&lt;p>上下文是作为Golang基本特性的一部分.因此理解并知道如何使用它们是非常重要的.&lt;code>Context&lt;/code>包提供了一个非常简单和轻量级的API来与这个关键组件进行交互.关于&lt;code>context.Context&lt;/code>的另一个重要的事情是,它可以用于多种事情.我们再这篇文章中涉及到了很多场景,在其中一些场景中,一个单一的上下文可以用来控制和携带范围值.这使得上下文成为创建可靠和简单代码的一个非常重要和强大的工具.&lt;/p></description></item><item><title>诊断性能问题的工作流程(2)</title><link>https://murph.site/post/2020-05-07-diagnosingmemoryperformance-part2/</link><pubDate>Thu, 07 May 2020 14:27:26 +0000</pubDate><guid>https://murph.site/post/2020-05-07-diagnosingmemoryperformance-part2/</guid><description>&lt;p>原文为Maoni发布在Microfost Blog中的, 诊断性能问题的工作流程系列.
目前共更新三章. 在本章中, Maoni继续介绍了如何进行诊断性能问题, 以及一个略微棘手的问题.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="原文信息">原文信息&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/maoni0">@Maoni Stephens-Twitter&lt;/a>
&lt;a href="https://github.com/Maoni0">@Maoni Stephens-Github&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://murph.site/posts/images/1587561145552-0d8a560c-3b7d-443a-badc-a98ddbb6e7bf.png" alt="authorize">&lt;/p>
&lt;p>如果这篇文章可以帮到您，那么这将是我最大的荣幸，希望您点进原文，在文章下方留下善意的回复，您的支持将是这些可敬的社区磐石保持创作激情中最大的一部分:)&lt;/p>
&lt;p>&lt;a href="https://devblogs.microsoft.com/dotnet/work-flow-of-diagnosing-memory-performance-issues-part-2">原文&lt;/a>&lt;/p>
&lt;p>&lt;strong>中文版本将不会以任何形式收费，版权属与原作者&lt;/strong>&lt;/p>
&lt;hr>
&lt;h2 id="正文">正文&lt;/h2>
&lt;p>在这一章中, 我将讨论一下您应该将精力花费在哪里, 然后继续我的分析. 原本我打算深入研究GCStats视图, 但我刚刚调试了一个长时间挂起的问题. 我想分享给大家, 当您在分析问题时, 其中的一些通用的思路. 当然, 您也可以直接&lt;a href="https://devblogs.microsoft.com/dotnet/work-flow-of-diagnosing-memory-performance-issues-part-2/#continuing-the-analysis">跳到分析部分&lt;/a>.&lt;/p>
&lt;h3 id="请明智的花费精力">请明智的花费精力&lt;/h3>
&lt;p>PerfView不仅仅是用于收集痕迹的, 更重要的是, 它是用于分析痕迹的. 我遇到过很多人, 他们仅仅使用Perfview进行收集痕迹. 我真的强烈鼓励您将其作为一个分析工具来使用.&lt;/p>
&lt;p>PerfView中内置了大量的帮助, 显然, 我写这个系列的博客主要原因也是为了帮助您, 只是更侧重内存方面. 我这样做的最终目的-是帮助您
获得一些搞清楚性能问题的思路跟方法, 而不是详细的列出您可能碰到的所有问题, 这完全不现实.&lt;/p>
&lt;p>我的理念是您应该明智的花费自己的时间, 我都非常忙, 有做不完的任务. 我也明白, 我中的许多人的性格都很独立, 喜欢自己想办法.&lt;/p>
&lt;p>所以, 在请别人帮忙之前, 您会自己完成多少工作呢?这是我遵循的几个规则 -&lt;/p>
&lt;ul>
&lt;li>
&lt;p>慷慨的花时间去学习以后会经常用到的知识与技能, 如果我正在研究一个以后不大可能再研究的领域中的问题, 我倾向于尽早的寻求帮助, 因为我知道在这里获得的知识可能只会用到一次. 但如果我知道我需要再次解决这个领域的问题, 我会花费尽可能多的时间来了解它.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果我有一个紧急的问题, 而我认识的人多半已经知道答案, 我会尽早的向他们寻求帮助. 而如果是我认为这是我需要知道的事情, 我会先把问题处理好, 然后花费时间去了解更多的细节(其他团队可能正在等待解决方案). 当我真的向对方请求帮助时, 我会提供问题的详细描述与调试的信息给对方, 以节省对方询问的时间.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="继续分析">继续分析&lt;/h3>
&lt;p>在&lt;a href="https://devblogs.microsoft.com/dotnet/work-flow-of-diagnosing-memory-performance-issues-part-0/">Part0&lt;/a>我提到了我会从两个跟踪来开始调查. 第二个跟踪是获取CPU采样和一些其他的通用事件, 比如磁盘/网络IO :&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">PerfView /nogui /accepteula /KernelEvents&lt;span class="o">=&lt;/span>default+Memory+VirtualAlloc /ClrEvents:GC+Stack /MaxCollectSec:600 /BufferSize:3000 /CircularMB:3000 collect
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个跟踪, 也就是GCCollectOnly跟踪, 是为了准确的了解GC的性能&amp;ndash;您想在最小的干扰下进行收集, 而命令行的参数GCCollectOnly正是做这个的.&lt;/p>
&lt;p>第二个跟踪可以让您了解机器上的运行情况. GC生活在一个进程中的线程中, 其他进程可能会影响GC的运行. 请注意, 目前在dotnet-trace中还没有等效的功能 - 您需要在Linux上使用[perfcollect脚本](&lt;a href="https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/linux-performance-tracing">https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/linux-performance-tracing&lt;/a>. md#preparing-your-machine)收集跟踪, 例如perf+Lttng, 不幸的是它不能提供完全等同的功能(Lttng没有栈)但是在其他方面, 它确实能提供机器范围的视图, 而不是像dotnet-trace只提供一个进程的事件.&lt;/p>
&lt;p>请注意, 我也指定了 &lt;strong>&lt;code>/BufferSize:3000 /CircularMB:3000&lt;/code>&lt;/strong> 参数, 我现在收集的事件比较多, 默认值可能不够用, 对于GCCollectOnly, 我知道它收集的事件不多, 所以默认值就足够了. 一般来说, 我发现3000MB对于这个跟踪的两个参数都是足够的. 如果这些大小有问题, PerfView会给出非常有参考价值的信息, 所以请注意它弹出的对话框! 这是由HandleLostEvents方法触发的:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="k">private&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">HandleLostEvents&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Window&lt;/span> &lt;span class="n">parentWindow&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">truncated&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">numberOfLostEvents&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">eventCountAtTrucation&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">StatusBar&lt;/span> &lt;span class="n">worker&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">string&lt;/span> &lt;span class="n">warning&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(!&lt;/span>&lt;span class="n">truncated&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// TODO see if we can get the buffer size out of the ETL file to give a good number in the message.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">warning&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;WARNING: There were &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">numberOfLostEvents&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="s">&amp;#34; lost events in the trace. \r\n&amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">&amp;#34;Some analysis might be invalid. \r\n&amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">&amp;#34;Use /InMemoryCircularBuffer or /BufferSize:1024 to avoid this in future traces. &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">warning&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;WARNING: The ETLX file was truncated at &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">eventCountAtTrucation&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="s">&amp;#34; events. \r\n&amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">&amp;#34;This is to keep the ETLX file size under 4GB, however all rundown events are processed. \r\n&amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">&amp;#34;Use /SkipMSec:XXX after clearing the cache (File-&amp;gt;Clear Temp Files) to see the later parts of the file. \r\n&amp;#34;&lt;/span> &lt;span class="p">+&lt;/span>
&lt;span class="s">&amp;#34;See log for more details. &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&lt;code>If&lt;/code>&lt;/strong> 的情况是告诉您有事件丢失了, 您同时记录了太多的事件, 而缓冲区不够大. 所以它告诉您, 应该通过 &lt;strong>&lt;code>/BuffSize&lt;/code>&lt;/strong> 指定一个更大的值. 我一般觉得 &lt;strong>&lt;code>/InMemoryCircularBuffer&lt;/code>&lt;/strong> 参数不可靠, 所以我一般不用它.&lt;/p>
&lt;p>&lt;strong>&lt;code>Else&lt;/code>&lt;/strong> 的情况是告诉您, 您使用的 &lt;strong>&lt;code>/CircularMB&lt;/code>&lt;/strong> 参数太大了, 导致PerfView生成的. etlx文件太大, 不能一次解析完, 所以当您使用PerfView查看跟踪时, 它将只显示可以容纳在4GB. etlx中第一部分的信息. 这并不意味着您需要减少这个参数的大小, 这只是意味着您需要采取额外的步骤才能看到所有信息. 要看到后面的部分, 您需要跳过第一部分, 这正是对话框中告诉您需要做的. 通常您会看到这个对话框与第二个跟踪.&lt;/p>
&lt;p>我的做法是, 查看GCStats找出哪个时间段是我感兴趣的, 然后跳过之前的部分. 请注意, 如果您看我在&lt;a href="https://devblogs.microsoft.com/dotnet/gc-perf-infrastructure-part-1/">这篇博客&lt;/a>提到的GC性能基础结构的跟踪, 您就不会有这个问题, 因为基础结构会查看. etl文件, 不会经过. etlx的步骤. 这就解释了为什么当您使用GC Perf infra时, 您可以看到比您在PerfView中更多的GC&lt;/p>
&lt;p>指定 &lt;strong>&lt;code>/ClrEvents:GC+Stack&lt;/code>&lt;/strong> 参数是很重要的, 运行时的默认会收集大量的关键词:&lt;/p>
&lt;ul>
&lt;li>Default = GC&lt;/li>
&lt;li>Type&lt;/li>
&lt;li>GCHeapSurvivalAndMovement&lt;/li>
&lt;li>Binder&lt;/li>
&lt;li>Loader&lt;/li>
&lt;li>JIt&lt;/li>
&lt;li>NGen&lt;/li>
&lt;li>SupressNGen&lt;/li>
&lt;li>StopEnumeration&lt;/li>
&lt;li>Security&lt;/li>
&lt;li>AppDomainResourceManagement&lt;/li>
&lt;li>Exception&lt;/li>
&lt;li>Threading&lt;/li>
&lt;li>Contention&lt;/li>
&lt;li>Stack&lt;/li>
&lt;li>JittedMethodILToNativeMap&lt;/li>
&lt;li>ThreadTransfer&lt;/li>
&lt;li>GCHeapAndTypeNames&lt;/li>
&lt;li>Codesymbols&lt;/li>
&lt;li>Compilation&lt;/li>
&lt;/ul>
&lt;p>其中一些会人为的增大很多GC的暂停时间. 比如 &lt;strong>&lt;code>GCHeapSurvivalAndMovement&lt;/code>&lt;/strong>, 它实际上向BGC添加了另一个STW暂停, 可能会使BGC的实际STW暂停时间增加十倍以上.&lt;/p>
&lt;p>当我知道自己要专注于GC的性能时, 我会选择不收集rundown事件, 即在命令行中添加 &lt;strong>&lt;code>/NoV2Rundown /NoNGENRundown /NoRundown&lt;/code>&lt;/strong> 这意味着我不会得到一些托管的调用帧(ie, moduleA!? instead of something like &lt;strong>&lt;code>moduleX!methodFoo(argType)&lt;/code>&lt;/strong> ). 但如果您作为一个使用GC的客户, rundown事件是非常有用的, 您可以得到来自于您代码的托管调用帧, 来验证是否可以通过修改代码来帮助改善性能.&lt;/p>
&lt;p>性能问题的类别之一是偶尔的长时间GC(您可以很容易的在GCCollectOnly的跟踪中发现他们), 您可以使用这个命令行, 让PerfView在观察到长GC时立刻停止跟踪:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">PerfView.exe /nogui /accepteula /StopOnGCOverMSec:100 /Process:MyProcess /DelayAfterTriggerSec:0 /CollectMultiple:3 /KernelEvents&lt;span class="o">=&lt;/span>default+Memory+VirtualAlloc /ClrEvents:GC+Stack /BufferSize:3000 /CircularMB:3000 collect
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用您的进程名字替换掉MyProcess(如果您的进程名字是a. exe, 这里的参数不含. exe, 应该是/Process:A)&lt;/p>
&lt;p>用一个恰当的数字替换掉100(如果您想捕获一个500ms的GC, 就用500替换).&lt;/p>
&lt;p>我在&lt;a href="https://devblogs.microsoft.com/dotnet/you-should-never-see-this-callstack-in-production/">这篇博客&lt;/a>中解释了很多这样的参数, 所以在这里就不在赘述了.&lt;/p>
&lt;p>这个停止触发器(在本例中是 &lt;strong>&lt;code>/StopOnGCOverMSec&lt;/code>&lt;/strong>)是我在PerfView中最喜欢的功能之一. dotnet-trace暂时还没有这个功能(没有不提供的理由, 这是需要处理的工作之一). 我通常会从这里开始, 尤其是当长GC已经相当可观时. 他的开销确实比/GCCollectOnly的大得多, 但不会太大(通常是个位数的百分比). 所以我预测产品仍然可以正常的运行, 并且一直重现同样的问题. 我见过人们追逐由&lt;code>Heisenberg effect(海森堡效应)&lt;/code>引发的不同性能问题.&lt;/p>
&lt;p>还有其他的停止触发器. 要获得有关于它们的帮助, 点击Help/Command Line Helper, 然后在帮助页面上搜索StopOn. 你会看到一堆与各种触发条件有关的停止跟踪开关. 与GC相关的有:&lt;/p>
&lt;ul>
&lt;li>[-StopOnPerfCounter:STRING,…]&lt;/li>
&lt;li>[-StopOnEtwEvent:STRING,…]&lt;/li>
&lt;li>[-StopOnGCOverMsec:0]&lt;/li>
&lt;li>[-StopOnGCSuspendOverMSec:0]&lt;/li>
&lt;li>[-StopOnBGCFinalPauseOverMsec:0]&lt;/li>
&lt;/ul>
&lt;p>前两个是通用的, 所以可以使用在任何的性能计数器/ETW事件上. 我自己从没有手动的使用过-StopOnEtwEvent触发器. 我觉得这个参数很有潜力, 只是我还没有时间去实验它.&lt;/p>
&lt;p>最后三个不需要我解释. &lt;strong>&lt;code>StopOnGCOverMSec&lt;/code>&lt;/strong> 是最常用的一个. 请注意, &lt;strong>&lt;code>StopOnGCOverMSec&lt;/code>&lt;/strong> 指的是GC/Start与GC/Stop的间隔时间, 如果您指定了/StopOnGCMSec:500, 意味着一旦检测到GC/Start与GC/Stop的间隔超过了500ms, 跟踪就会停止. 如果您正在观察长时间的挂起, 您需要使用 &lt;strong>&lt;code>StopOnGCSuspendOverMSec&lt;/code>&lt;/strong> 触发器, 它实际上在内部与StopOnEtwEvent一起实现, 比较 &lt;strong>&lt;code>SuspendEEStart&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>SuspendEEStop&lt;/code>&lt;/strong> 时间的间隔触发 -&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">etwStopEvents. Add(&amp;#34;E13C0D23-CCBC-4E12-931B-D9CC2EEE27E4/GC/SuspendEEStart;StopEvent=GC/SuspendEEStop;StartStopID=ThreadID;Keywords=0x1;TriggerMSec=&amp;#34; + StopOnGCSuspendOverMSec);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="长时间挂起">长时间挂起&lt;/h4>
&lt;p>现在来说说我刚调试的客户问题-从来自GCCollectOnly的跟踪中, 我看到一些GC花费了很长的时间在挂起上(3/4秒!). 我还让他们收集了第二个跟踪, 并查看发生长时间挂起期间的CPU采样. 请注意, 出现这种情况时, 只有挂起的时间很长, GC部分是正常的. 还有一种特殊情况是, 挂起与GC的时间都是随机长的, 或其中一个很长. 通常这种情况是有什么东西阻碍了GC线程的运行. 最常见的原因是机器上有一个优先级很高的线程(通常是意外的)在运行时会出现这种情况.&lt;/p>
&lt;p>在这种情况下, 我已经验证了这个问题总是在挂起时才会表现出来. 而从第二个跟踪中, 我可以看到一些IO正在进行, 我知道这可能就是阻止挂起的原因. 然而, 这只是基于我所掌握的知识, 如果我不知道, 我可以做些什么来验证这个理论?另外, 我想展示给我的客户, 到底是如何阻止挂起的. 这个时候就需要一个更加重量级的跟踪, 即 &lt;strong>&lt;code>ThreadTime&lt;/code>&lt;/strong> 跟踪. 如果您有一个线程没有完成它的工作, 要么这个工作就是需要很长时间, 要么就是有什么东西导致它长时间的阻塞. 如果它被阻塞了, 在某些时候它会被唤醒, 我想知道是谁唤醒了它. 收集Context Switch(上下文切换)与ReadyThread(准备线程)事件正是做这个的&amp;ndash;看看一个线程为什么会被切换, 以及谁来启用并再次执行它. 在PerfView中叫做 &lt;strong>&lt;code>ThreadTime&lt;/code>&lt;/strong> 跟踪. 它仅收集默认的kernel事件加上这两个事件. 所以您可以把 &lt;strong>&lt;code>/KernelEvents=default+Memory+VirtualAlloc&lt;/code>&lt;/strong> 替换成 &lt;strong>&lt;code>/KernelEvents=ThreadTime+Memory+VirtualAlloc&lt;/code>&lt;/strong> . 这些Context Switch和Ready Thread事件会非常多, 所以有时候原来的问题长时间都不能复现, 在这种情况下, 问题会复现的.&lt;/p>
&lt;p>请查看PerfView的帮助来获得更多使用 &lt;strong>ThreadTime&lt;/strong>跟踪的说明.&lt;/p>
&lt;p>当您有Ready Thread事件时, PerfView中的&amp;quot;Advanced Group(高级组)&amp;ldquo;下方会额外多出一个视图, 叫做&amp;quot;ThreadTime(with ReadyThread) stacks - 线程时间(含准备线程))栈&amp;rdquo;. 我通常要做的就是打开这个视图, 搜索阻塞的时间段内被阻塞的调用, 并查看它的&amp;quot;READIED_BY&amp;quot;调用栈, 导致哪些线程被唤醒. 所以我做的是384, 026. 930 到 387, 822. 395的这个时间段, 也就是GCStats标识的挂起事件, 复制到这个视图中的Start和End框中, 然后在Find框中搜索suspend, 并点击Callees. 这就是我所看到的-&lt;/p>
&lt;p>![WorkFlow-suspension-readythread-view](/posts/images/WorkFlow-suspension-readythread-view. jpg)&lt;/p>
&lt;p>我希望看到一个READIED_BY的栈, 它唤醒并调用SuspendEE线程, 确实有一个, 但是没有用, 因为它展示的调用栈不够深, 引发问题的我的代码或者客户代码的一些东西. 它仍然在ntoskrnl中(Windows系统内核).&lt;/p>
&lt;p>所以对于这种情况, 我可以请PerfView的owner来看看(当时已经是深夜了;即便他当时真的响应了, 也未必有时间马上来看, 而且这个看起来也不是什么可以马上解决的小事. 我真的很想把这个问题搞清楚😀), 或者我可以自己想一些其他的办法来取得更多的进展. 当针对一类问题设计的视图不能使用时, 总会有一个视图可以拯救您, 那就是事件视图. 当然, 可能还有其他工具可以解决它们, 比如WPA. 但我上一次认真使用WPA已经是好几年的前的事了, UI和我熟悉的UI已经有很大的不同.&lt;/p>
&lt;p>事件视图是事件的原始版本, 包含在. etl文件中(这并不完全准确, PerfView仍然对一些事件进行了处理;但在多数情况下, 它是非常原始的&amp;ndash;您可以得到事件的名称和每个事件的字段). 而我最感兴趣的ReadyThread事件, 他告诉我哪个线程是由其他的哪个线程唤醒的. 所以我做的第一件事就是过滤到我想看到的事件. 否则会有太多的事件. 我打开&amp;quot;Event&amp;quot;视图, 再次输入开始和结束的时间戳, 就像我在其他视图中做的那样, 然后在Process Filter中输入感兴趣的过程(为了保护隐私, 我仅仅使用X来说明). 为了只过滤挂起和ReadyThread事件, 我在filter框中输入sus|ready. 这将只包含&amp;quot;sus&amp;quot;或&amp;quot;ready&amp;quot;的事件 &amp;ndash;&lt;/p>
&lt;p>![WorkFlow-suspension0](/posts/images/WorkFlow-suspension0. jpg)&lt;/p>
&lt;p>现在, 选中三个事件并输入回车, 现在我只会看到这三个-&lt;/p>
&lt;p>![WorkFlow-suspension1](/posts/images/WorkFlow-suspension1. jpg)&lt;/p>
&lt;p>这里有很多事件, 但我只对那些唤醒我的线程感兴趣, 也就是本例中的GC线程&lt;code>ThreadID 7736&lt;/code>(在服务器GC中, SuspendEE总是由Heap0的GC线程调用), 手动检查这些线程是很困难的, 所以我希望只过滤那些有趣的线程. 做到这一点的方法是让事件视图展示一列单独的字段, 这样我就可以进行排序&amp;ndash;在默认情况下, 它只在一列中显示所有字段. 我可以通过点击Cols按钮(&amp;ldquo;Columns To Display&amp;quot;旁边), 选择我想要显示的字段. 我选择了三个字段, 分别是&amp;ndash;&lt;/p>
&lt;p>![WorkFlow-suspension2](/posts/images/WorkFlow-suspension2. jpg)&lt;/p>
&lt;p>现在, 它显示了这三个字段, 然后我按AwakenedThreadID进行排序, 并寻找我的线程7736.&lt;/p>
&lt;p>![WorkFlow-suspension3](/posts/images/WorkFlow-suspension3. jpg)&lt;/p>
&lt;p>果然, 有一个有意思的线程-线程33108. 如果我点击其中一个时间戳, 然后按Alt+S(意味着打开与这个时间戳相关的任意调用栈;您也可以通过上下文的菜单进入), 我看到了这个调用栈&amp;ndash;&lt;/p>
&lt;p>![WorkFlow-suspension4](/posts/images/WorkFlow-suspension4. jpg)&lt;/p>
&lt;p>底部写着&amp;quot;Readied Thread 7736&amp;rdquo;. 而其他的时间戳几乎都有相同的调用栈. 我只显示了运行时里面的部分, 但是对于客户代码里面的部分, 总是同一个dll抛出的异常. 原来这是我挂起代码的一个BUG-它在调用 &lt;strong>&lt;code>GetFileVersionInfoSize&lt;/code>&lt;/strong> 系统API之前, 应该先切换到抢占模式. 我猜测这是一个处理异常的代码地址(最上面的异常处理代码叫做 &lt;strong>&lt;code>coreclr!DwGetFileVersionInfo&lt;/code>&lt;/strong> ), 它没有被广泛使用, 所以我直到现在才注意到. 对客户来说, 一个变通的方法是避免让他们的dll抛出这些异常, 这样会使它不调用这个运行时的代码地址.&lt;/p>
&lt;p>这就是今天的全部内容了, 如果您有任何反馈, 请一如既往的告诉我.&lt;/p></description></item><item><title>诊断性能问题的工作流程(1)</title><link>https://murph.site/post/2020-05-06-diagnosingmemoryperformance-part1/</link><pubDate>Wed, 06 May 2020 14:27:26 +0000</pubDate><guid>https://murph.site/post/2020-05-06-diagnosingmemoryperformance-part1/</guid><description>&lt;p>原文为Maoni发布在Microfost Blog中的, 诊断性能问题的工作流程系列.
目前共更新三章. 在本章中, Maoni介绍了一些在进行性能诊断时的操作与分析.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="原文信息">原文信息&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://twitter.com/maoni0">@Maoni Stephens-Twitter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Maoni0">@Maoni Stephens-Github&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://murph.site/posts/images/1587561145552-0d8a560c-3b7d-443a-badc-a98ddbb6e7bf.png" alt="authorize">&lt;/p>
&lt;p>如果这篇文章可以帮到您，那么这将是我最大的荣幸，希望您点进原文，在文章下方留下善意的回复，您的支持将是这些可敬的社区磐石保持创作激情中最大的一部分:)&lt;/p>
&lt;p>&lt;a href="https://devblogs.microsoft.com/dotnet/work-flow-of-diagnosing-memory-performance-issues-part-1">原文&lt;/a>&lt;/p>
&lt;p>&lt;strong>中文版本将不会以任何形式收费，版权属与原作者&lt;/strong>&lt;/p>
&lt;hr>
&lt;h2 id="正文">正文&lt;/h2>
&lt;p>在此篇文章中, 我会讨论一些关于怎样对PerfView做出贡献的内容, 然后继续分析GCStats. 您可以直接&lt;a href="https://devblogs.microsoft.com/dotnet/work-flow-of-diagnosing-memory-performance-issues-part-1/#continuing-the-analysis">跳到分析部分&lt;/a>.&lt;/p>
&lt;p>对于分析工具, 有一点令我沮丧, 市面上有很多的内存性能工具, 但很少有针对可通用类型以及与我所服务的客户的. 所有的工具都很基础, 很少有工具能进行中级和高级分析.&lt;/p>
&lt;p>我知道有很多人在抱怨PerfView的可用性 - 我确实赞同一些抱怨. 但尽管如此, 我还是喜欢PerfView, 因为这是它往往是我唯一一个能用来完成工作的工具.&lt;/p>
&lt;p>我希望大家能够理解&lt;/p>
&lt;ol>
&lt;li>我能放在PerfView上的精力非常有限. 我没有类似Visual Studio组织完整的工作团队;我只有部分时间, 来自于少部分成员的兼职, 所以很难满足所有用户的要求.&lt;/li>
&lt;li>在进行高级分析时, 情况会变得非常复杂, 这意味着实现可用性没有那么简单-当有很多需要关注的细节时, permutation很快会变得十分庞大.&lt;/li>
&lt;/ol>
&lt;p>对类似PerfView之类的项目做出贡献, 是对&lt;code>. NET Core&lt;/code>做出贡献的绝佳方式, 它没有运行时本身那么陡峭的学习曲线, 但是您的贡献可能会帮助人们节省大量时间.&lt;/p>
&lt;p>您可以从克隆&lt;a href="https://github.com/microsoft/perfview/">Perfview repo&lt;/a>并编译它开始. 然后您可以通过单步执行代码来学习了 – IMO 单步执行代码, 这往往是最好的了解新鲜事物的方法.&lt;/p>
&lt;p>我在此讨论内容的代码大部分都位于2个文件中&lt;/p>
&lt;pre>&lt;code>- src\TraceEvent\Computers\TraceManagedProcess. cs
- src\PerfView\GCStats. cs.
&lt;/code>&lt;/pre>
&lt;p>如果您搜索诸如Clr. EventName(例如Clr. GCStart与Clr. GCStop), 这里就是进行事件分析的地方(您不需要关心对于跟踪的解析 – 那在其他地方处理的).&lt;/p>
&lt;p>对于GC的分析就是这个文件中的&lt;a href="https://devblogs.microsoft.com/dotnet/glad-part-2/">GLAD&lt;/a> (GC Latency Analysis and Diagnostics)库. GCStats. cs使用它来显示您在GCStats视图中看到的东西, 它是一个HTML文件. 如果您想在自己的工具上展示GC的相关信息, GCStats. cs是一个很好的使用GLAD的例子.&lt;/p>
&lt;h3 id="继续分析">继续分析&lt;/h3>
&lt;p>该篇包含两部分内容. 怎样对PerfView进行贡献, 然后我会继续分析 GCStats. 您也可以直接跳转到 &lt;a href="#">分析部分&lt;/a>(&lt;a href="https://devblogs.microsoft.com/dotnet/work-flow-of-diagnosing-memory-performance-issues-part-1/#continuing-the-analysis)">https://devblogs.microsoft.com/dotnet/work-flow-of-diagnosing-memory-performance-issues-part-1/#continuing-the-analysis)&lt;/a>.&lt;/p>
&lt;p>虽然有许许多多的分析内存性能的工具, 能让我和我的客户完成大多数工作的的却很少. 每个工具都很基础, 无法进行中级和高级的分析.&lt;/p>
&lt;p>我知道有很多人认为 PerfView 难以使用 - 我赞同其中的一些观点. 但尽管如此, 我还是喜欢PerfView. 往往我只能使用它来完成工作.&lt;/p>
&lt;p>希望大家能理解: 1) 我能放在 PerfView 项目上的精力非常有限. 我们没有类似 Visual Studio 这样完整的团队; 只有少部分成员的兼职, 所以很难满足所有用户的要求. 2) 在进行高级分析时, 情况往往非常复杂, 当有如此多的可能性, 列表会快速地变大.&lt;/p>
&lt;p>对类似PerfView的项目进行贡献, 也是对 &lt;code>.Net Core&lt;/code> 做出贡献的绝佳方式, 该项目没有运行时陡峭的学习曲线, 但是您的贡献会帮助人们节省大量时间. 您可以从克隆&lt;a href="#">Perfview repo&lt;/a>(&lt;a href="https://github.com/microsoft/perfview/">https://github.com/microsoft/perfview/&lt;/a>)并编译它开始. 然后您可以通过单步执行代码进行学习.&lt;/p>
&lt;blockquote>
&lt;p>在我看来, 单步执行代码, 这总是理解新事物的最好方法.&lt;/p>
&lt;/blockquote>
&lt;p>我在此处讨论内容的相关代码大部分都位于2个文件中. srcTraceEventComputersTraceManagedProcess.cs 和 srcPerfViewGCStats.cs.&lt;/p>
&lt;p>如果您搜索Clr.EventName (例如Clr.GCStart与Clr.GCStop) . 此处就是进行事件分析的地方 (您不需要关心对于跟踪的解析, 那是在其他地方处理的). 对于GC的分析就是这个文件中的&lt;a href="#">GLAD&lt;/a>(&lt;a href="https://devblogs.microsoft.com/dotnet/glad-part-2/">https://devblogs.microsoft.com/dotnet/glad-part-2/&lt;/a>) (GC Latency Analysis and Diagnostics)库. GCStats.cs 使用它来显示您在 GCStats 视图, 这是一个 HTML 文件. 如果您想在自己的工具上展示 GC 的相关信息, GCStats.cs 是一个很好的使用 GLAD 的例子.&lt;/p>
&lt;h3 id="继续分析-1">继续分析&lt;/h3>
&lt;p>上一篇文章中, 我们谈到了收集 GCCollectOnly 跟踪和检查 PerfView 中的GCStats视图, 该视图由收集的 GC 事件启用. 您也可以在 Linux 上用 dotnet-trace 做这件事. 从它的&lt;a href="https://github.com/dotnet/diagnostics/blob/master/documentation/dotnet-trace-instructions.md">文档&lt;/a>中可以看出: 它提供的一个内置配置文件相当于 PerfView 的收集命令中的 &lt;code>/GCCollectOnly&lt;/code> 参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Shell" data-lang="Shell"> --profile
&lt;span class="o">[&lt;/span>omitted&lt;span class="o">]&lt;/span>
gc-collect 以极低的性能开销仅跟踪收集GC
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>您可以使用dotnet-trace命令, 在Linux上收集跟踪信息.&lt;/p>
&lt;p>** dotnet trace collect -p &amp;lt;pid&amp;gt; -o &amp;lt;outputpath&amp;gt; &amp;ndash;profile gc-collect**&lt;/p>
&lt;p>并在 Windows 上用 PerfView 查看. 从使用者的角度看, 当您查看 GCStats 视图时, 两者唯一的区别是, 在 Windows 上收集的跟踪, 您会看到所有的托管线程, 而在 Linux 上收集的跟踪只有您指定的pid的进程.&lt;/p>
&lt;p>在这篇博文中, 我将重点介绍您在 GCStats 中看到的表格. 我在这里展示一个例子. 一个进程的第一个表是 &amp;ldquo;GC Rollup By Generation &amp;ldquo;表 &amp;ndash;&lt;/p>
&lt;p>&lt;img src="#" alt="WorkFlow-GCRollupByGeneration">(/posts/images/WorkFlow-GCRollupByGeneration.png)&lt;/p>
&lt;p>我省略了 &lt;code>Alloc MB/MSec GC&lt;/code> 与 &lt;code>Survived MB/MSec GC&lt;/code> 这两列 – 他们在我开始研究PerfView之前就已经存在了, 如果能把它们修复得更有意义就好了, 但我一直没有处理.&lt;/p>
&lt;p>现在, 如果您在做一个日常性分析, 也就是说您没有一个直接的目标, 只是想看看是否有什么需要改进的地方, 您可以从这个滚动表开始.&lt;/p>
&lt;p>如果我们查看上面的表格, 就会发现 gen2 的平均中断时间比 gen0/1 的 GCs 大很多. 我会猜测 gen2 可能没有经历过中断, 因为&lt;code>Max Peak MB&lt;/code> 大约是13GB，如果我们要遍历所有这些内存, 大概要花费超过167ms. 所以这些很可能是BGCs (Background GC), 这一点在滚动表下面的 &amp;ldquo;Gen 2 for pid: process_name &amp;ldquo;表中得到了证实（我从表中删除了一些列，这样就不会太宽了） -_&lt;/p>
&lt;p>&lt;img src="#" alt="WorkFlow-GCRollupByGeneration2">(/posts/images/WorkFlow-GCRollupByGeneration2.png)&lt;/p>
&lt;p>2B表示在后台执行的二代堆GC. 如果您想知道还有哪些组合, 只需将鼠标悬停在&amp;quot;Gen&amp;quot;的列标题上, 将显示以下文字:&lt;/p>
&lt;p>** N=NonConcurrent/非并发式GC, B=Background/后台GC, F=Foreground/前台GC (一直以后台GC运行) I=Induced/触发式GC i=InducedNotForced/触发非前台 **&lt;/p>
&lt;ul>
&lt;li>N=NonConcurrent/非并发式GC&lt;/li>
&lt;li>B=Background/后台GC&lt;/li>
&lt;li>F=Foreground/前台GC (一直以后台GC运行)&lt;/li>
&lt;li>I=Induced/触发式GC&lt;/li>
&lt;li>i=InducedNotForced/触发非前台&lt;/li>
&lt;/ul>
&lt;p>所以对于&lt;code>二代堆GC&lt;/code>, 您可能会看到2N, 2NI, 2Ni or 2Bi. 如果您使用GC. Collect来触发GC, 它有两个采用此参数的重载 –&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="p">(&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">blocking&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除非您将该参数指定为False, 它意味着将始终以阻塞的方式触发GC. 这就是为什么没有2BI的原因&lt;/p>
&lt;p>在rollup表中, 始终有一列&lt;code>Induced&lt;/code>显示为0 , 但如果这不是0, 特别是当与GC的总数相比时是一个相当大的数字时, 找出是谁在触发这些GC是一个非常好的主意. 这在这篇&lt;a href="#">博客&lt;/a>(&lt;a href="https://devblogs.microsoft.com/dotnet/gc-etw-events-2/">https://devblogs.microsoft.com/dotnet/gc-etw-events-2/&lt;/a>)中做了详细的讲解.&lt;/p>
&lt;p>所以, 我知道了这些GC总数全部来源于BGC, 但是, 对于BGC来说, 这些中断的时间太长了!&lt;/p>
&lt;p>请注意, 虽然我将两次中断显示成了一次, 但它实际是由两次中断组成的. 在&lt;a href="#">这张来自GC MSDN的图片&lt;/a>(&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/media/fundamentals/background-workstation-garbage-collection.png">https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/media/fundamentals/background-workstation-garbage-collection.png&lt;/a>)中, 显示了一次BGC中的两次中断(蓝色的列所指的位置).&lt;/p>
&lt;p>但是, 您在GCStats中看到的中断时间是这两次中断的总和. 原因是最早地中断通常都非常短(图片中的蓝色列仅用于举例-它们并不代表实际上真正用了多长时间). 在这种情况下, 我想看每个单独地中断花费了多长时间 - 我正在考虑在GLAD中提供各个BGC的中断信息, 但在这之前, 您可以自己弄清楚.&lt;/p>
&lt;p>在&lt;a href="#">这篇博客中&lt;/a>(&lt;a href="https://devblogs.microsoft.com/dotnet/gc-etw-events-3/),">https://devblogs.microsoft.com/dotnet/gc-etw-events-3/),&lt;/a> 我描述了BGC在触发事件时的顺序. 所以我需要找到两次&lt;code>SuspendEE/RestartEE&lt;/code>事件.&lt;/p>
&lt;p>要做到这一点, 您可以在PerfView中打开&lt;code>“Events”&lt;/code>视图, 然后从&lt;code>“Pause Start”&lt;/code>开始.&lt;/p>
&lt;p>让我以GC#9217为例, 它的首次中断在789, 274. 32 您可以在“Start”输入框中输入它. 然后在“Process Filter”中输入“gc/”, 仅过滤GC事件, 然后选择SuspendEE/RestartEE/GCStart/GCStop事件, 摁下回车.&lt;/p>
&lt;p>下面是此时您将会看到的示例图片(出于隐私原因, 我删除了进程名字) -
&lt;img src="#" alt="WorkFlow1-0">(/posts/images/WorkFlow1-0.jpg)&lt;/p>
&lt;p>这就是首次发生中断的地方, 如果您选择首次SuspendEEStart和首次RestartEEStop的时间戳, 我可以看到在这个视图的状态栏上显示了两个时间戳的差异是75. 902. 这已经非常长了 -通常来说, 首次中断时间每组都应当不超过几毫秒. 对于这种情况, 您基本上可以将其交给我, 因为在我的设计中, 不应该出现这种情况.&lt;/p>
&lt;p>但是, 如果您有兴趣自己继续诊断, 下一步是捕获更多的事件跟踪, 来向我展示挂起期间发生了什么. 通常, 我捕获的跟踪是CPU事件样本+GC的事件跟踪. CPU样本清楚的向我展示了真正的罪魁祸首. 其实并不是在GC中, 而是运行时中的其他东西. 后来我已经修复了, 这个性能问题只有在您的程序中有多个模块时才会发生(在这个特殊的场景下, 客户拥有数千个模块).&lt;/p>
&lt;p>第二次的BGC中断从SuspendEEStart事件, 原因是“SuspendForGCPrep”, 与第一次的SuspendEESrart事件不同的是, 此次原因是“SuspendForGC”.&lt;/p>
&lt;p>由GC为目的引发的停顿, 仅有两个可能, 而“SuspendForGCPrep”仅在初次中断的BGC期间可用.&lt;/p>
&lt;p>通常来说, 一个BGC仅会有两次中断, 但如果您启用了&lt;code>GCHeapSurvivalAndMovementKeyword&lt;/code>事件, 您将在BGC期间添加第三个中断, 因为要触发这些事件, 托管线程必须处于中断状态. 如果是这种情况, 第三次暂停也会有“SuspendForGCPerp”原因, 并且通常比其他两个中断要长的多. 因为堆如果很大, 触发事件将花费很长的时间.&lt;/p>
&lt;p>我见过很多这种情况, 当大家根本不需要这些事件时, 却看到BGC的中断时间被人为拉长. 原因正是这个.&lt;/p>
&lt;p>您可能会问, 既然不需要这些事件, 为什么还会不小心的收集到这些事件. 这是因为您在收集运行时事件时, 它们已经包含在默认值中(您可以在srcTraceEventParsersClrTraceEventParser.cs 中看到默认值中包含的关键字, 搜索default. 您会看到许多关键字被包含在了默认值中).&lt;/p>
&lt;p>一般来说, 我认为PerfView的理念是, 默认情况下应当收集足够的事件提供给您以便进行调查. 在一般情况下, 这都是一个很好的策略, 因为您可能无法对问题进行复现. 但是您需要通过收集事件本身来判断, 什么是由于收集事件引发的, 什么是由于产品引发的.&lt;/p>
&lt;p>当然, 这是在建立在您有能力收集这么多事件的基础上. 有时绝对不是这种情况. 这就是为什么我通常要求人们从轻量级跟踪开始, 来向我表明这里是否存在问题, 以及如果存在问题, 我还需要收集哪些事件.&lt;/p>
&lt;p>我从gen2表注意到了的另一件事, 所有的BGC都是由AllocLarge触发的. 可能被触发的原因定义为GCReason:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#">srcTraceEventParsersClrTraceEventParser.cs&lt;/a>(&lt;a href="https://github.com/microsoft/perfview/blob/master/src/TraceEvent/Parsers/ClrTraceEventParser.cs">https://github.com/microsoft/perfview/blob/master/src/TraceEvent/Parsers/ClrTraceEventParser.cs&lt;/a>)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="k">public&lt;/span> &lt;span class="k">enum&lt;/span> &lt;span class="n">GCReason&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">AllocSmall&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Induced&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">LowMemory&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Empty&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">AllocLarge&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">OutOfSpaceSOH&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">OutOfSpaceLOH&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">InducedNotForced&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x7&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Internal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x8&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">InducedLowMemory&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0x9&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">InducedCompacting&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0xa&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">LowMemoryHost&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0xb&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">PMFullGC&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0xc&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">LowMemoryHostBlocking&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0xd&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最常见的原因是&lt;code>AllocSmall&lt;/code>, 意味着您在&lt;code>SOH(Small Object Heap)&lt;/code>的分配触发了GC. 而&lt;code>AllocLarge&lt;/code>意味着&lt;code>LOH(Long Object Heap)&lt;/code>的分配触发了GC.&lt;/p>
&lt;p>在这种特殊下团队已经意识到, 他们正在进行大量的LOH分配 – 但他们可能不知道会经常导致BGC.&lt;/p>
&lt;p>如果您查看“Gen2 Survival Rate %”列, 您会注意到二代的存活率非常高(97%), 但是“LOH Survival Rate %(LOH存活率 %)”却非常低-29%&lt;/p>
&lt;p>这告诉了我, 有许多的LOH分配存活的相当短. 我会根据gen2的预算调整LOH的预算(分配量阈值), 因此在这种情况下, 我不会过多的触发gen2的GC.&lt;/p>
&lt;p>如果我想提高LOH的存活率, 我需要比这更加频繁地触发BGC. 如果您很清楚您的LOH的分配通常是临时的, 那么通过GCLOHThreshold的配置增大LOH的阈值就是一个不错的办法.&lt;/p>
&lt;p>这就是今天的全部内容了. 下次我将讨论GCStats视图中更多表.&lt;/p></description></item></channel></rss>